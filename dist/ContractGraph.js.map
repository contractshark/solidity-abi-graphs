{"version":3,"sources":["../src/ContractGraph.js"],"names":["graphlibOptions","directed","compound","multigraph","defaultOptions","constructorOnly","graphlib","id","validateOptions","options","Error","validateArtifact","a","contractName","abi","length","filter","entry","type","forEach","includes","JSON","stringify","ContractGraph","artifact","_gs","nodes","ids","constructorNodeId","name","names","edges","Graph","parseContract","g","node","nodeType","payable","inputs","e","i","childId","addChild","push","outputs","usesGraphlib","setNode","functionNodes","parentId","childNode","parent","dataType","order","setParent"],"mappings":"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","sourcesContent":["\nimport { Graph } from 'graphlib'\n\nimport uuidv4 from 'uuid/v4'\n\nconst graphlibOptions = { directed: true, compound: true, multigraph: false }\n\nconst defaultOptions = {\n  constructorOnly: false,\n  graphlib: false,\n  id: null,\n}\n\n/**\n * Validates options passed to ContractGraph constructor. Throws on error.\n * @param {object} options the constructor options\n */\nfunction validateOptions (options) {\n  if (!options || typeof options !== 'object') {\n    throw new Error('Invalid options')\n  }\n}\n\n/**\n * Validates a Solidity compilation artifact for parsing into a graph.\n * @param {object} a the artifact\n */\nfunction validateArtifact (a) {\n\n  // must have contractName and abi properties\n  if (!a) throw new Error('Invalid artifact: Falsy.')\n  if (!a.contractName) throw new Error('Invalid artifact: Falsy contract name')\n  if (!a.abi || a.abi.length < 1) {\n    throw new Error('Invalid artifact: Invalid abi')\n  }\n\n  // must only have one constructor\n  if (a.abi.filter(entry => entry.type === 'constructor').length !== 1) {\n    throw new Error(\n      'Parsing failure: Invalid abi (no or multiple constructors)'\n    )\n  }\n\n  // abi entities must have valid types\n  a.abi.forEach(entry => {\n    if (!['constructor', 'function', 'event'].includes(entry.type)) {\n      throw new Error(\n        'Parsing failure: Invalid abi entity type \"' + entry.type +\n        '\" for entry: ' + JSON.stringify(entry)\n      )\n    }\n  })\n}\n\n/**\n *\n */\nexport default class ContractGraph {\n\n  /**\n   * Parses artifact and creates graph after validating artifact and options.\n   * @param {object} artifact the Solidity compilation artifact to represent\n   * @param {object} options optional options\n   */\n  constructor (artifact, options = {}) {\n    validateOptions(options)\n    validateArtifact(artifact)\n    this._gs = {\n      id: options.id || uuidv4(),\n      edges: {\n        ids: {},\n        names: {},\n      },\n      nodes: {\n        ids: {},\n        names: {},\n      },\n      options: {\n        ...defaultOptions,\n        ...options,\n      },\n    }\n    if (this._gs.options.graphlib) {\n      this._gs.Graph = new Graph(graphlibOptions)\n    }\n    parseContract(artifact, this)\n  }\n\n  /**\n   * Get the id of this graph.\n   */\n  id = () => this._gs.id\n\n  /**\n   * Get (a copy of) the options of this graph.\n   */\n  options = () => { return { ...this._gs.options } }\n\n  /**\n   * Get whether this graph only contains the constructor node.\n   */\n  constructorOnly = () => this._gs.options.constructorOnly\n\n  /**\n   * Get whether this graph uses graphlib.\n   */\n  usesGraphlib = () => this._gs.options.graphlib\n\n  /**\n   * Get the name of the contract represented by this graph.\n   */\n  contractName = () => this._gs.contractName\n\n  /**\n   * Get the constructor node object of this graph.\n   */\n  constructorNode = () => {\n    return {\n      ...this._gs.nodes.ids[this._gs.constructorNodeId],\n    }\n  }\n\n  /**\n   * Get the node with the given id.\n   */\n  nodeById = id => {\n    return {\n      ...this._gs.nodes.ids[id],\n    }\n  }\n\n  /**\n   * Get the node with the given name.\n   */\n  nodeByName = name => {\n    return {\n      ...this._gs.nodes.names[name],\n    }\n  }\n\n  // getEdge = (source, target) => this._gs.edges[source + ':' + target]\n}\n\n/**\n * Parses the artifact a into the ContractGraph g.\n * @param {object} a the artifact to parse\n * @param {object} g the ContractGraph that will represent the artifact\n */\nfunction parseContract (a, g) {\n\n  g._gs.contractName = a.contractName\n\n  a.abi.forEach(entry => {\n\n    if (\n      entry.type !== 'event' && // ignore events for now\n      (\n        entry.type === 'constructor' ||\n        // ignore function nodes if this is a constructor-only graph\n        (entry.type === 'function' && !g.constructorOnly())\n      )\n    ) {\n\n      const id = uuidv4()\n      const node = {\n        id,\n        nodeType: entry.type,\n        name: entry.name || 'constructor',\n        payable: entry.payable,\n      }\n\n      if (entry.inputs) {\n        node.inputs = []\n        entry.inputs.forEach((e, i) => {\n          const childId = uuidv4()\n          addChild(e, childId, id, 'input', g, i)\n          node.inputs.push(childId)\n        })\n      }\n\n      if (entry.outputs) {\n        node.outputs = []\n        entry.outputs.forEach(e => {\n          const childId = uuidv4()\n          addChild(e, childId, id, 'output', g)\n          node.outputs.push(childId)\n        })\n      }\n\n      if (g.usesGraphlib()) g._gs.Graph.setNode(id, node.name)\n\n      if (entry.type === 'constructor') g._gs.constructorNodeId = id\n      else if (entry.type === 'function') {\n        if (!g._gs.functionNodes) g._gs.functionNodes = []\n        g._gs.functionNodes.push(node)\n      }\n\n      g._gs.nodes.ids[id] = node\n      g._gs.nodes.names[node.name] = id\n    }\n  })\n}\n\nfunction addChild (e, childId, parentId, nodeType, g, i = null) {\n\n  const childNode = {\n    childId,\n    nodeType,\n    parent: parentId,\n    name: e.name,\n    dataType: e.type,\n  }\n  if (i !== null) childNode.order = i\n\n  if (g.usesGraphlib()) g._gs.Graph.setParent(childId, parentId)\n\n  g._gs.nodes.ids[childId] = childNode\n\n  return childId\n}\n"],"file":"ContractGraph.js"}