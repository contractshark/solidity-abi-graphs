{"version":3,"sources":["../src/ContractGraph.js"],"names":["graphlibOptions","directed","compound","multigraph","defaultOptions","constructorOnly","graphlib","id","validateOptions","options","Error","validateArtifact","a","contractName","abi","length","filter","entry","type","forEach","includes","JSON","stringify","ContractGraph","artifact","_gs","Graph","nodes","ids","constructorId","Object","values","functionIds","map","nodeById","name","names","inputs","outputs","edges","parseContract","constructorNodeId","g","node","nodeType","payable","input","i","childId","addChild","output","usesGraphlib","setNode","push","parentId","childNode","solidityDataType","order","setParent"],"mappings":"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","sourcesContent":["\nimport { Graph } from 'graphlib'\n\nimport uuidv4 from 'uuid/v4'\n\nconst graphlibOptions = { directed: true, compound: true, multigraph: false }\n\nconst defaultOptions = {\n  // whether the graph only contains the constructor node\n  constructorOnly: false,\n  // whether the graph should maintain a graphlib representation of itself\n  graphlib: false,\n  // if not falsy, the graph will use this id\n  id: null,\n}\n\n/**\n * Validates options passed to ContractGraph constructor. Throws on error.\n * @param {object} options the constructor options\n */\nfunction validateOptions (options) {\n  if (!options || typeof options !== 'object') {\n    throw new Error('Invalid options')\n  }\n}\n\n/**\n * Validates a Solidity compilation artifact for parsing into a graph.\n * @param {object} a the artifact\n */\nfunction validateArtifact (a) {\n\n  // must have contractName and abi properties\n  if (!a) throw new Error('Invalid artifact: Falsy.')\n  if (!a.contractName) throw new Error('Invalid artifact: Falsy contract name')\n  if (!a.abi || a.abi.length < 1) {\n    throw new Error('Invalid artifact: Invalid abi')\n  }\n\n  // must only have one constructor\n  if (a.abi.filter(entry => entry.type === 'constructor').length !== 1) {\n    throw new Error(\n      'Parsing failure: Invalid abi (no or multiple constructors)'\n    )\n  }\n\n  // abi entities must have valid types\n  a.abi.forEach(entry => {\n    if (![\n      'constructor', 'function', 'event', 'fallback',\n    ].includes(entry.type)) {\n      throw new Error(\n        'Parsing failure: Invalid abi entity type \"' + entry.type +\n        '\" for entry: ' + JSON.stringify(entry)\n      )\n    }\n  })\n}\n\n/**\n *\n */\nexport default class ContractGraph {\n\n  /**\n   * Parses artifact and creates graph after validating artifact and options.\n   * @param {object} artifact the Solidity compilation artifact to represent\n   * @param {object} options optional options\n   */\n  constructor (artifact, options = {}) {\n\n    validateOptions(options)\n    validateArtifact(artifact)\n\n    this._gs = {\n      id: options.id || uuidv4(),\n      contractName: null,\n      options: {\n        ...defaultOptions,\n        ...options,\n      },\n      nodes: {\n        ids: {},\n        names: {},\n        functionIds: [],\n        constructorId: null,\n      },\n      edges: {\n        ids: {},\n        names: {},\n      },\n    }\n    this._gs.options.graphlib\n    ? this._gs.Graph = new Graph(graphlibOptions)\n    : this._gs.Graph = null\n\n    parseContract(artifact, this)\n\n    // parsingpost-validation\n    if (!this.constructorNodeId()) {\n      throw new Error('Contract missing constructor.')\n    }\n  }\n\n  /**\n   * Get the id of this graph.\n   */\n  id = () => this._gs.id\n\n  /**\n   * Get (a copy of) the options of this graph.\n   */\n  options = () => { return { ...this._gs.options } }\n\n  /**\n   * Get whether this graph only contains the constructor node.\n   */\n  constructorOnly = () => this._gs.options.constructorOnly\n\n  /**\n   * Get whether this graph uses graphlib.\n   */\n  usesGraphlib = () => this._gs.options.graphlib\n\n  /**\n   * Get the internal graphlib graph, or null if !usesGraphlib.\n   */\n  graphlibGraph = () => this._gs.Graph\n\n  /**\n   * Get the name of the contract represented by this graph.\n   */\n  contractName = () => this._gs.contractName\n\n  /**\n   * Get the constructor node object of this graph.\n   */\n  constructorNode = () => {\n    return {\n      ...this._gs.nodes.ids[this._gs.nodes.constructorId],\n    }\n  }\n\n  /**\n   * Gets the id of the constructor node associated with this graph.\n   */\n  constructorNodeId = () => this._gs.nodes.constructorId\n\n  /**\n   * Gets an array of the function nodes associated with this graph.\n   */\n  functionNodes = () => {\n    return Object.values(this._gs.nodes.functionIds).map(\n      id => this.nodeById(id))\n  }\n\n  /**\n   * Gets an array of the function node ids associated with this graph.\n   */\n  functionNodeIds = () => this._gs.nodes.functionIds\n\n  /**\n   * Get the node with the given id.\n   */\n  nodeById = id => {\n    return (\n      this._gs.nodes.ids[id]\n      ? { ...this._gs.nodes.ids[id] }\n      : null\n    )\n  }\n\n  /**\n   * Get the node with the given name.\n   */\n  nodeByName = name => {\n    return (\n      this._gs.nodes.names[name]\n      ? this.nodeById(this._gs.nodes.names[name])\n      : null\n    )\n  }\n\n  /**\n   * Get an array of the input nodes of the node with id.\n   */\n  inputNodes = id => {\n    if (!this.nodeById(id)) return null\n    return (\n      !this.nodeById(id).inputs\n      ? []\n      : Object.values(this.nodeById(id).inputs).map(\n        id => this.nodeById(id)\n      )\n    )\n  }\n\n  /**\n   * Get an array of the output nodes of the node with id.\n   */\n  outputNodes = id => {\n    if (!this.nodeById(id)) return null\n    return (\n      !this.nodeById(id).outputs\n      ? []\n      : Object.values(this.nodeById(id).outputs).map(\n        id => this.nodeById(id)\n      )\n    )\n  }\n\n  // getEdge = (source, target) => this._gs.edges[source + ':' + target]\n}\n\n/**\n * Parses the artifact a into the ContractGraph g.\n * @param {object} a the artifact to parse\n * @param {object} g the ContractGraph that will represent the artifact\n */\nfunction parseContract (a, g) {\n\n  g._gs.contractName = a.contractName\n\n  a.abi.forEach(entry => {\n\n    if ( // only handle constructor and function nodes\n      entry.type === 'constructor' ||\n      // ignore function nodes if this is a constructor-only graph\n      (entry.type === 'function' && !g.constructorOnly())\n    ) {\n\n      // create node object\n      const id = uuidv4()\n      const node = {\n        id,\n        nodeType: entry.type,\n        name: entry.name || 'constructor',\n        payable: entry.payable,\n      }\n\n      // parse function inputs\n      if (entry.inputs) {\n        node.inputs = entry.inputs.map((input, i) => {\n          const childId = uuidv4()\n          addChild(input, childId, id, 'input', g, i)\n          return childId\n        })\n      }\n\n      // parse function outputs\n      if (entry.outputs) {\n        node.outputs = entry.outputs.map(output => {\n          const childId = uuidv4()\n          addChild(output, childId, id, 'output', g)\n          return childId\n        })\n      }\n\n      // add node to graphlib Graph\n      if (g.usesGraphlib()) g._gs.Graph.setNode(id, node.name)\n\n      // constructor and function-specific mappings\n      if (entry.type === 'constructor') g._gs.nodes.constructorId = id\n      else if (entry.type === 'function') {\n        g._gs.nodes.functionIds.push(id)\n      }\n\n      g._gs.nodes.ids[id] = node\n      g._gs.nodes.names[node.name] = id\n    }\n  })\n}\n\n/**\n * Adds an input or output node of parent with parentId to the graph g.\n * @param {object} entry the abi input/output entry\n * @param {string} id the id to use for this child node\n * @param {string} parentId the id of the parent node\n * @param {string} nodeType input or output\n * @param {object} g the ContractGraph\n * @param {number} i the abi index if an input (optional)\n */\nfunction addChild (entry, id, parentId, nodeType, g, i = null) {\n\n  const childNode = {\n    id,\n    nodeType,\n    parentId,\n    name: entry.name,\n    solidityDataType: entry.type,\n  }\n  if (i) childNode.order = i\n\n  if (g.usesGraphlib()) g._gs.Graph.setParent(id, parentId)\n\n  g._gs.nodes.ids[id] = childNode\n\n  return id\n}\n"],"file":"ContractGraph.js"}